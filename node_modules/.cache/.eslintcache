[{"/home/nirja/internship/billDemo/src/index.js":"1","/home/nirja/internship/billDemo/src/App.js":"2","/home/nirja/internship/billDemo/src/Route1.js":"3","/home/nirja/internship/billDemo/src/Look.js":"4","/home/nirja/internship/billDemo/src/PreBill.js":"5","/home/nirja/internship/billDemo/src/example.js":"6","/home/nirja/internship/billDemo/src/users.js":"7","/home/nirja/internship/billDemo/src/PriBillDemo.js":"8","/home/nirja/internship/billDemo/src/Kbdemo.js":"9","/home/nirja/internship/billDemo/src/EditBill.js":"10","/home/nirja/internship/billDemo/src/Reg.js":"11","/home/nirja/internship/billDemo/src/DataContext.js":"12","/home/nirja/internship/billDemo/src/Destruccture.js":"13"},{"size":430,"mtime":1667196386366,"results":"14","hashOfConfig":"15"},{"size":432,"mtime":1662700872237,"results":"16","hashOfConfig":"15"},{"size":780,"mtime":1667033447274,"results":"17","hashOfConfig":"15"},{"size":399,"mtime":1662566498000,"results":"18","hashOfConfig":"15"},{"size":3576,"mtime":1670131682146,"results":"19","hashOfConfig":"15"},{"size":17291,"mtime":1665465666085,"results":"20","hashOfConfig":"15"},{"size":2521,"mtime":1662700829083,"results":"21","hashOfConfig":"15"},{"size":8259,"mtime":1662961305325,"results":"22","hashOfConfig":"15"},{"size":5516,"mtime":1662961089937,"results":"23","hashOfConfig":"15"},{"size":15296,"mtime":1665464969566,"results":"24","hashOfConfig":"15"},{"size":325,"mtime":1663753952444,"results":"25","hashOfConfig":"15"},{"size":247,"mtime":1667033743148,"results":"26","hashOfConfig":"15"},{"size":560,"mtime":1667281705013,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"afrvj8",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/nirja/internship/billDemo/src/index.js",[],[],"/home/nirja/internship/billDemo/src/App.js",[],[],[],"/home/nirja/internship/billDemo/src/Route1.js",[],[],"/home/nirja/internship/billDemo/src/Look.js",[],[],[],"/home/nirja/internship/billDemo/src/PreBill.js",[],[],"/home/nirja/internship/billDemo/src/example.js",[],[],"/home/nirja/internship/billDemo/src/users.js",[],[],"/home/nirja/internship/billDemo/src/PriBillDemo.js",["70","71","72","73","74","75"],[],"/home/nirja/internship/billDemo/src/Kbdemo.js",[],[],"/home/nirja/internship/billDemo/src/EditBill.js",["76","77"],[],"import Button from \"react-bootstrap/Button\";\nimport React, { useEffect, useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport uuid from \"react-uuid\";\nimport \"./example.css\";\n\nconst AddBill = (props) => {\n  // const {testvalue} = useParams();\n  // console.log(testvalue);\n  const [cname, setCName] = useState(\"\");\n  const [bdate, setBDate] = useState(\"\");\n  const [bnumber, setBNumber] = useState(\"\");\n  const [totalPayable, setTotalPayable] = useState(0);\n  const [sub, setSub] = useState(0);\n  const [ttl, setTtl] = useState(0);\n  const [rund, setRund] = useState(0);\n  const [gt, setGt] = useState(0);\n  const [billData, setBillData] = useState([]);\n  const [error, setError] = useState({});\n  // console.log(billData,\">>>>>bill data\");\n  // const date = new Date().toLocaleDateString();\n  const [discountObj, setDiscountObj] = useState({});\n  const [mainArr, setMainArray] = useState([]);\n  // console.log(mainArr);\n  const navigate = useNavigate();\n  const [errArray, setErrArr] = useState([\n    {\n      item: true,\n      quantity: true,\n      price: true,\n    },\n  ]);\n  const [requiredData, setRequiredData] = useState(true);\n  const [submited, setSubmitted] = useState(false);\n  useEffect(() => {\n    // console.log(\">>>>>> use effect\");\n    // JSON.parse(localStorage.getItem('edit'))\n    let localData = JSON.parse(localStorage.getItem(\"edit\"));\n    // console.log(localData,\">>>>localdata\");\n    setCName(localData.name);\n    setBNumber(localData.number);\n    setBDate(localData.date);\n    setTotalPayable(localData.tpayAmount);\n    setSub(Number(localData.tsubTotal));\n    setBillData(localData.itemLists);\n    setGt(Number(localData.tgst));\n    setDiscountObj({ ...localData.discount });\n    setTtl(Number(localData.ttotal));\n    setRund(localData.rund);\n    if (localData !== null) {\n      setMainArray(localData);\n    }\n\n    // console.log(mainDetails);\n  }, []);\n  useEffect(() => {\n    errArray.forEach((element) => {\n      if (\n        element.item === false &&\n        element.quantity === false &&\n        element.price === false\n      ) {\n        setRequiredData(false);\n      } else {\n        setRequiredData(true);\n        return;\n      }\n    });\n  }, [errArray]);\n\n  // const alldata = [...billData];\n  // alldata.push(update, namedate);\n  // let alldata = Object.assign({},namedate, billData, update);\n  // console.log(alldata);\n\n  const onCalculatedTotal = () => {\n    let subTotal = 0;\n    let total = 0;\n    billData.forEach((ele, i) => {\n      subTotal = subTotal + ele.subtotal;\n      total = total + ele.total;\n    });\n    setSub(subTotal);\n    setTtl(total);\n    setTotalPayable(Number(total) - Number(discountObj?.disValue));\n    setRund((Math.round(total) - total).toFixed(2));\n    setGt((total - subTotal).toFixed(2));\n  };\n\n  const clickRowInTable = () => {\n    let data = {\n      id: uuid(),\n      name: \"\",\n      date: \"\",\n      item: \"\",\n      quantity: 0,\n      price: 0,\n      gst: 0,\n      subtotal: \"\",\n      total: \"\",\n    };\n    let errData = {\n      item: true,\n      quantity: true,\n      price: true,\n    };\n    let tempArr = [...billData];\n    let tempErrArr = [...errArray];\n    tempArr.push(data);\n    tempErrArr.push(errData);\n    console.log(tempArr);\n    setErrArr([...tempErrArr]);\n    setBillData([...tempArr]);\n  };\n\n  const setFormData = (value, name, arrInd) => {\n    billData[arrInd][name] = value;\n    setBillData([...billData]);\n    console.log(value);\n    if (value) {\n      errArray[arrInd][name] = false;\n      setErrArr([...errArray]);\n    } else {\n      errArray[arrInd][name] = true;\n      setErrArr([...errArray]);\n    }\n    if (name === \"price\" || name === \"quantity\") {\n      billData[arrInd][\"subtotal\"] =\n        billData[arrInd][\"price\"] * billData[arrInd][\"quantity\"];\n      setBillData([...billData]);\n      onCalculatedTotal();\n    }\n    if (name === \"price\" || name === \"quantity\" || name === \"gst\") {\n      billData[arrInd][\"total\"] =\n        billData[arrInd][\"price\"] * billData[arrInd][\"quantity\"] +\n        (billData[arrInd][\"price\"] *\n          billData[arrInd][\"quantity\"] *\n          billData[arrInd][\"gst\"]) /\n          100;\n      setBillData([...billData]);\n      onCalculatedTotal();\n    }\n  };\n  const deleteItem = (id) => {\n    let tempData = [...billData];\n    tempData.splice(id, 1);\n    setBillData([...tempData]);\n\n    // console.log(billData.id)\n    // console.log(e.target.value, typeof (e.target.value), \">>>>>>>>>>>>\")\n    // console.log(billData, \">>>>>billData>>>\")\n    // const updateitems = billData.filter((item) => item.id !== Number(e.target.value));\n    // // const updateitems = billData.splice(e.target.id, 1);\n    // setBillData(updateitems);\n    // return\n  };\n\n  // var rund = (Math.round(totalPayable) - totalPayable).toFixed(2);\n\n  const setDiscountData = (name, value) => {\n    discountObj[name] = value;\n    setDiscountObj({ ...discountObj });\n    if (name === \"disValue\") {\n      if (discountObj?.disType === \"â‚¹\") {\n        setTotalPayable(ttl - parseInt(value).toFixed(2));\n      } else if (discountObj?.disType === \"%\") {\n        let x = (ttl * parseInt(value)) / 100;\n        setTotalPayable(ttl - x.toFixed(2));\n      }\n    } else if (name === \"disType\") {\n      if (discountObj?.disValue && value === \"â‚¹\") {\n        setTotalPayable(ttl - parseInt(discountObj?.disValue).toFixed(2));\n      } else {\n        let x = (ttl * parseInt(discountObj?.disValue)) / 100;\n        setTotalPayable(ttl - x.toFixed(2));\n      }\n    }\n  };\n\n  const updateData = (e) => {\n    e.preventDefault();\n    setSubmitted(true);\n    billData.forEach((element, i) => {\n      if (!element.item || element.quantity === 0 || element.price === 0) {\n        setRequiredData(true);\n        return;\n      } else {\n        setRequiredData(false);\n      }\n    });\n    if (!requiredData) {\n      setSubmitted(false);\n      let localData1 = JSON.parse(localStorage.getItem(\"edit\"));\n      let mainDetails = JSON.parse(localStorage.getItem(\"dataList\"));\n      let mainId = mainDetails.findIndex((x) => x.id === localData1.id);\n      // let justArr = [...billData]\n      let localData2 = {\n        ...localData1,\n        name: cname,\n        date: bdate,\n        number: bnumber,\n        itemLists: billData,\n        tpayAmount: totalPayable,\n        discount: discountObj,\n      };\n      if (mainId !== -1) {\n        mainDetails.splice(mainId, 1, localData2);\n        // console.log(mainDetails);\n      }\n      localStorage.setItem(\"dataList\", JSON.stringify(mainDetails));\n      localStorage.removeItem(\"edit\");\n      // storeLocalStorageData();\n      // localStorage.removeItem('edit');\n      alert(\"Your data successfully Updated\");\n      navigate(\"/\");\n    }\n  };\n  useEffect(() => {\n    if (!cname) {\n      setError({ ...error, cname: \"Please enter the name\" });\n    } else if (!bdate) {\n      setError({ ...error, bdate: \"Please enter the date\" });\n    } else if (!bnumber) {\n      setError({ ...error, bnumber: \"Please enter the billnumber\" });\n    } else {\n      setError({});\n    }\n  }, [cname, bdate, bnumber]);\n\n  return (\n    <>\n      {/* {console.log(\">>>>>> return\")} */}\n      <>\n        <Link to=\"/\">\n          <Button className=\"btn btn-info center my-3\">Previous Bill</Button>\n        </Link>\n      </>\n      <form onSubmit={updateData}>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text>Name:</InputGroup.Text>\n          <Form.Control\n            aria-label=\"Name:\"\n            placeholder=\"Client's Name\"\n            value={cname}\n            onChange={(e) => setCName(e.target.value)}\n            required\n          />\n          {error && error.cname && (\n            <div style={{ color: \"red\" }}>{error.cname}</div>\n          )}\n          <br />\n          <br />\n          <InputGroup.Text>Bill date:</InputGroup.Text>\n          <Form.Control\n            type=\"date\"\n            aria-label=\"Bill date:\"\n            value={bdate}\n            onChange={(el) => setBDate(el.target.value)}\n            required\n          />\n          {error && error.bdate && (\n            <div style={{ color: \"red\" }}>{error.bdate}</div>\n          )}\n        </InputGroup>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text>Bill number:</InputGroup.Text>\n          <Form.Control\n            type=\"number\"\n            aria-label=\"Bill number:\"\n            placeholder=\"Enter bill number\"\n            value={bnumber}\n            onChange={(e) => setBNumber(e.target.value)}\n            required\n          />\n          {error && error.bnumber && (\n            <div style={{ color: \"red\" }}>{error.bnumber}</div>\n          )}\n        </InputGroup>\n\n        <table style={{ width: \"100%\" }}>\n          <thead>\n            <tr>\n              <th>No.</th>\n              <th className=\"constth\">Item</th>\n              <th style={{ paddingLeft: \"25px\" }}>Quantity</th>\n              <th style={{ paddingLeft: \"35px\" }}>Price</th>\n              <th style={{ paddingLeft: \"40px\" }}>GST</th>\n              <th style={{ paddingRight: \"40px\" }}>Sub-total</th>\n              <th>Total</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {billData?.map((data, i) => (\n              <tr key={i}>\n                <td>{i + 1}</td>\n                <td>\n                  <input\n                    className=\"btn btn-light col-sm-10\"\n                    type=\"text\"\n                    placeholder=\"Item\"\n                    value={data.item}\n                    onChange={(e) => setFormData(e.target.value, \"item\", i)}\n                  ></input>\n                  {submited && !billData[i][\"item\"] && (\n                    <div style={{ color: \"red\" }}>*Item is required</div>\n                  )}\n                </td>\n                <td>\n                  <input\n                    className=\"btn btn-light col-sm-5\"\n                    size=\"4\"\n                    type=\"number\"\n                    placeholder=\"Quantity\"\n                    value={Math.abs(data.quantity)}\n                    onChange={(e) => setFormData(e.target.value, \"quantity\", i)}\n                  ></input>\n                  {submited && !billData[i][\"quantity\"] && (\n                    <div style={{ color: \"red\" }}>*Quantity is required</div>\n                  )}\n                </td>\n                <td>\n                  <input\n                    className=\"btn btn-light col-sm-5\"\n                    type=\"number\"\n                    placeholder=\"Price\"\n                    value={Math.abs(data.price)}\n                    onChange={(e) => setFormData(e.target.value, \"price\", i)}\n                  ></input>\n                  {submited && !billData[i][\"price\"] && (\n                    <div style={{ color: \"red\" }}>*Price is required</div>\n                  )}\n                </td>\n                <td>\n                  <input\n                    className=\"btn btn-light col-sm-5\"\n                    type=\"number\"\n                    placeholder=\"GST\"\n                    value={Math.abs(data.gst)}\n                    onChange={(e) => setFormData(e.target.value, \"gst\", i)}\n                  ></input>\n                </td>\n                <td\n                  value={data.sub_total}\n                  onChange={(e) => setFormData(e.target.value, \"sub_total\", i)}\n                  className=\"px-2\"\n                >\n                  {Math.abs((data.quantity * data.price).toFixed(2))}\n                  {/* {data?.subtotal} */}\n                </td>\n                <td\n                  value={data?.total}\n                  onChange={(e) => setFormData(e.target.value, \"total\", i)}\n                >\n                  {Math.abs(\n                    (\n                      data.quantity * data.price +\n                      (data.quantity * data.price * data.gst) / 100\n                    ).toFixed(2)\n                  )}\n                  {/* {data?.total} */}\n                </td>\n\n                <td>\n                  {billData?.length > 1 && (\n                    <button\n                      className=\"btn btn-danger\"\n                      onClick={(e) => {\n                        deleteItem(i);\n                      }}\n                    >\n                      Delete\n                    </button>\n                  )}\n\n                  {billData?.length - 1 === i && (\n                    <Button\n                      className=\"small\"\n                      variant=\"primary\"\n                      onClick={() => {\n                        clickRowInTable();\n                      }}\n                    >\n                      Add\n                    </Button>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        {/* <button onClick={() => { handlePrintArray() }}>Print Array</button> */}\n\n        <ul>\n          <li className=\"list-group-item\">Sub-total : â‚¹{sub.toFixed(2)}</li>\n          <li className=\"list-group-item\">GST : â‚¹{gt}</li>\n          <li className=\"list-group-item\">Total : â‚¹{ttl.toFixed(2)}</li>\n          <li className=\"list-group-item\">\n            Discount :\n            <div>\n              <select\n                className=\"btn btn-secondary\"\n                value={discountObj.disType}\n                onChange={(e) => setDiscountData(\"disType\", e.target.value)}\n              >\n                <option className=\"btn btn-secondary\" value=\"\">\n                  Select Discount Type\n                </option>\n                <option className=\"btn btn-secondary\" value=\"â‚¹\">\n                  â‚¹\n                </option>\n                <option className=\"btn btn-secondary\" value=\"%\">\n                  %\n                </option>\n              </select>\n\n              <input\n                className=\"btn btn-light\"\n                placeholder=\"Enter Discount Value\"\n                value={discountObj.disValue}\n                defaultValue={0}\n                onChange={(e) => setDiscountData(\"disValue\", e.target.value)}\n              ></input>\n              {/* {discountObj?.disType && (\n              \n            )} */}\n            </div>\n          </li>\n          <li className=\"list-group-item\">\n            Total Discount Ruppes :{\" \"}\n            {ttl && totalPayable ? (ttl - totalPayable).toFixed(2) : 0}\n          </li>\n\n          <li className=\"list-group-item\">RoundUp : {rund}</li>\n          <li className=\"list-group-item\">\n            Total Payble: â‚¹\n            {totalPayable\n              ? Math.round(totalPayable)\n              : Math.round(ttl.toFixed(2))}\n          </li>\n        </ul>\n\n        {/* {!error ? <button\n          className=\"btn btn-success\"\n          type=\"submit\"\n          onClick={() => {\n            updateData();\n          }}\n        >\n          update\n        </button> : <button\n          className=\"btn btn-success\"\n          onClick={() => {\n            // alert(\"Error\")\n          }}\n        >\n          update\n        </button>} */}\n        <button\n          className=\"btn btn-success\"\n          type=\"submit\"\n          // onClick={() => {\n          //   updateData();\n          //   // alert(\"Your data successfully Updated\")\n          // }}\n        >\n          update\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default AddBill;\n","/home/nirja/internship/billDemo/src/Reg.js",[],[],"/home/nirja/internship/billDemo/src/DataContext.js",[],[],"/home/nirja/internship/billDemo/src/Destruccture.js",["78","79"],[],{"ruleId":"80","severity":1,"message":"81","line":12,"column":10,"nodeType":"82","messageId":"83","endLine":12,"endColumn":22},{"ruleId":"80","severity":1,"message":"84","line":13,"column":10,"nodeType":"82","messageId":"83","endLine":13,"endColumn":13},{"ruleId":"80","severity":1,"message":"85","line":14,"column":10,"nodeType":"82","messageId":"83","endLine":14,"endColumn":13},{"ruleId":"80","severity":1,"message":"86","line":15,"column":10,"nodeType":"82","messageId":"83","endLine":15,"endColumn":14},{"ruleId":"80","severity":1,"message":"87","line":16,"column":10,"nodeType":"82","messageId":"83","endLine":16,"endColumn":12},{"ruleId":"80","severity":1,"message":"88","line":17,"column":23,"nodeType":"82","messageId":"83","endLine":17,"endColumn":37},{"ruleId":"80","severity":1,"message":"89","line":25,"column":10,"nodeType":"82","messageId":"83","endLine":25,"endColumn":17},{"ruleId":"90","severity":1,"message":"91","line":230,"column":6,"nodeType":"92","endLine":230,"endColumn":29,"suggestions":"93"},{"ruleId":"80","severity":1,"message":"94","line":8,"column":12,"nodeType":"82","messageId":"83","endLine":8,"endColumn":13},{"ruleId":"80","severity":1,"message":"95","line":8,"column":15,"nodeType":"82","messageId":"83","endLine":8,"endColumn":16},"no-unused-vars","'totalPayable' is assigned a value but never used.","Identifier","unusedVar","'sub' is assigned a value but never used.","'ttl' is assigned a value but never used.","'rund' is assigned a value but never used.","'gt' is assigned a value but never used.","'setDiscountObj' is assigned a value but never used.","'mainArr' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array. You can also do a functional update 'setError(e => ...)' if you only need 'error' in the 'setError' call.","ArrayExpression",["96"],"'a' is assigned a value but never used.","'b' is assigned a value but never used.",{"desc":"97","fix":"98"},"Update the dependencies array to be: [cname, bdate, bnumber, error]",{"range":"99","text":"100"},[7104,7127],"[cname, bdate, bnumber, error]"]